# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the Lessons section in the .cursorrules file so you will not make the same mistake again. 

You should also use the .cursorrules file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:

venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"

The LLM API supports multiple providers:
• OpenAI (default, model: gpt-4o)
• Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
• DeepSeek (model: deepseek-chat)
• Anthropic (model: claude-3-sonnet-20240229)
• Gemini (model: gemini-pro)
• Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the tools/llm_api.py file to invoke the LLM if needed.

## Web browser

You could use the tools/web_scraper.py file to scrape the web.

venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3

This will output the content of the web pages.

## Search engine

You could use the tools/search_engine.py file to search the web.

venv/bin/python ./tools/search_engine.py "your search keywords"

This will output the search results in the following format:

URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result

If needed, you can further use the web_scraper.py file to scrape the web page content.

# Lessons

## User Specified Lessons

• You have a python venv in ./venv. Use it.
• Include info useful for debugging in the program output.
• Read the file before you try to edit it.
• Due to Cursor's limit, when you use git and gh and need to submit a multiline commit message, first write the message in a file, and then use git commit -F <filename> or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

• For search results, ensure proper handling of different character encodings (UTF-8) for international queries
• Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
• When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
• Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
• In Tailwind CSS, avoid using invalid classes like 'border-border' - use standard CSS properties or valid Tailwind classes instead
• In React contexts, always check the actual export names - NotificationContext exports 'useNotifications' (plural), not 'useNotification' (singular)
• When using framer-motion with React components, extend HTMLMotionProps<"element"> instead of React.HTMLAttributes to avoid type conflicts with animation event handlers
• In vite-plugin-pwa configuration, avoid using deprecated properties like 'cacheKeyWillBeUsed' in runtime caching options as they can cause workbox validation errors
• For PWA deployment on Vercel, ensure all required icon files exist in public folder and use vercel.json for proper headers
• PWA manifest must reference manifest.webmanifest (not manifest.json) and include all required icon sizes
• Service worker files need proper cache headers for PWA functionality on CDN deployments
• Tailwind CSS v4 has breaking changes and compatibility issues - prefer v3 for stable projects
• When upgrading to React 19, ensure Node.js version is compatible (v20.19.0+ or v22.12.0+)
• Tailwind v4 requires @tailwindcss/postcss plugin and has different gradient syntax
• For production stability, use Tailwind CSS v3.x instead of v4.x until ecosystem matures

# Scratchpad

## Current Task: Package Upgrade and Tailwind CSS Fix

### Task Explanation:
Upgrade all packages to latest versions, including React 19, and fix Tailwind CSS compatibility issues that broke the application.

### Problem Details:
- ❌ Tailwind CSS v4 has breaking changes causing gradient utilities to fail
- ❌ PostCSS configuration needs updates for Tailwind v4
- ❌ React 19 upgrade requires Node.js v20.19.0+ or v22.12.0+
- ❌ Application not working due to deprecated Tailwind classes

### Planning Steps:
✅ Upgrade Node.js to latest LTS using nvm
✅ Upgrade React and ReactDOM to v19
✅ Upgrade all other dependencies to latest versions
✅ Fix Tailwind CSS v4 compatibility issues
✅ Test build and development server
✅ Document lessons learned

### Progress:
✅ COMPLETED: Upgraded Node.js to v22.17.0 (LTS)
✅ COMPLETED: Upgraded React to v19.1.0 and ReactDOM to v19.1.0
✅ COMPLETED: Upgraded all major dependencies (date-fns, framer-motion, react-router-dom, etc.)
✅ COMPLETED: Upgraded all dev dependencies (eslint, cypress, jest, vite, etc.)
✅ COMPLETED: Attempted Tailwind CSS v4 upgrade but encountered compatibility issues
✅ COMPLETED: Downgraded to Tailwind CSS v3.4.0 for stability
✅ COMPLETED: Fixed PostCSS configuration for Tailwind v3
✅ COMPLETED: Verified build works correctly
✅ COMPLETED: Started development server for testing

### Technical Details:
✅ Node.js upgraded from v20.18.0 to v22.17.0 using nvm
✅ React upgraded from v18.3.1 to v19.1.0
✅ ReactDOM upgraded from v18.3.1 to v19.1.0
✅ All major dependencies upgraded to latest versions
✅ Tailwind CSS downgraded from v4.1.11 to v3.4.0 for stability
✅ PostCSS config reverted to standard Tailwind v3 plugin
✅ Build process now works without errors
✅ CSS generation working correctly (37.58 kB CSS file generated)

### Lessons Learned:
✅ Tailwind CSS v4 has significant breaking changes and compatibility issues
✅ Gradient utilities like `from-blue-50` don't work in Tailwind v4 without custom configuration
✅ PostCSS plugin changed from `tailwindcss` to `@tailwindcss/postcss` in v4
✅ For production stability, prefer Tailwind CSS v3.x until v4 ecosystem matures
✅ React 19 requires Node.js v20.19.0+ or v22.12.0+

### Status: COMPLETED
All packages have been successfully upgraded to latest versions, including React 19. Tailwind CSS compatibility issues have been resolved by downgrading to v3.4.0 for stability. The application now builds and runs correctly with all latest dependencies. 